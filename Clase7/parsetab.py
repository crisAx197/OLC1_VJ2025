
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftMASMENOSleftMAYORQCORDER CORIZQ FALSE ID IGUAL INT LLADER LLAIZQ MAS MAYORQ MENOS NUMERO PARDER PARIZQ PTC REVAL TRUE WHILEinit : instrucciones\n    instrucciones : instrucciones instruccion\n| instruccion\ninstruccion : evaluacion\n| asignacion\n| declaracion\n| swhile\nswhile : WHILE PARIZQ expresion PARDER LLAIZQ instrucciones LLADER\n    asignacion : ID IGUAL expresion PTC\n    declaracion : INT ID IGUAL expresion PTC\n    evaluacion : REVAL CORIZQ expresion CORDER PTC\n    expresion : NUMERO\n| ID\n| bool\nbool : TRUE\n| FALSE\nexpresion : expresion MAS expresion\n| expresion MENOS expresion\n| expresion MAYORQ expresion\n'
    
_lr_action_items = {'REVAL':([0,2,3,4,5,6,7,12,30,33,37,38,39,40,],[8,8,-3,-4,-5,-6,-7,-2,-9,-11,-10,8,8,-8,]),'ID':([0,2,3,4,5,6,7,10,12,13,14,16,24,27,28,29,30,33,37,38,39,40,],[9,9,-3,-4,-5,-6,-7,15,-2,19,19,19,19,19,19,19,-9,-11,-10,9,9,-8,]),'INT':([0,2,3,4,5,6,7,12,30,33,37,38,39,40,],[10,10,-3,-4,-5,-6,-7,-2,-9,-11,-10,10,10,-8,]),'WHILE':([0,2,3,4,5,6,7,12,30,33,37,38,39,40,],[11,11,-3,-4,-5,-6,-7,-2,-9,-11,-10,11,11,-8,]),'$end':([1,2,3,4,5,6,7,12,30,33,37,40,],[0,-1,-3,-4,-5,-6,-7,-2,-9,-11,-10,-8,]),'LLADER':([3,4,5,6,7,12,30,33,37,39,40,],[-3,-4,-5,-6,-7,-2,-9,-11,-10,40,-8,]),'CORIZQ':([8,],[13,]),'IGUAL':([9,15,],[14,24,]),'PARIZQ':([11,],[16,]),'NUMERO':([13,14,16,24,27,28,29,],[18,18,18,18,18,18,18,]),'TRUE':([13,14,16,24,27,28,29,],[21,21,21,21,21,21,21,]),'FALSE':([13,14,16,24,27,28,29,],[22,22,22,22,22,22,22,]),'CORDER':([17,18,19,20,21,22,34,35,36,],[26,-12,-13,-14,-15,-16,-17,-18,-19,]),'MAS':([17,18,19,20,21,22,23,25,31,34,35,36,],[27,-12,-13,-14,-15,-16,27,27,27,-17,-18,-19,]),'MENOS':([17,18,19,20,21,22,23,25,31,34,35,36,],[28,-12,-13,-14,-15,-16,28,28,28,-17,-18,-19,]),'MAYORQ':([17,18,19,20,21,22,23,25,31,34,35,36,],[29,-12,-13,-14,-15,-16,29,29,29,29,29,-19,]),'PTC':([18,19,20,21,22,23,26,31,34,35,36,],[-12,-13,-14,-15,-16,30,33,37,-17,-18,-19,]),'PARDER':([18,19,20,21,22,25,34,35,36,],[-12,-13,-14,-15,-16,32,-17,-18,-19,]),'LLAIZQ':([32,],[38,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,38,],[2,39,]),'instruccion':([0,2,38,39,],[3,12,3,12,]),'evaluacion':([0,2,38,39,],[4,4,4,4,]),'asignacion':([0,2,38,39,],[5,5,5,5,]),'declaracion':([0,2,38,39,],[6,6,6,6,]),'swhile':([0,2,38,39,],[7,7,7,7,]),'expresion':([13,14,16,24,27,28,29,],[17,23,25,31,34,35,36,]),'bool':([13,14,16,24,27,28,29,],[20,20,20,20,20,20,20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','parser.py',12),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones','parser.py',17),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones','parser.py',18),
  ('instruccion -> evaluacion','instruccion',1,'p_instruccion','parser.py',26),
  ('instruccion -> asignacion','instruccion',1,'p_instruccion','parser.py',27),
  ('instruccion -> declaracion','instruccion',1,'p_instruccion','parser.py',28),
  ('instruccion -> swhile','instruccion',1,'p_instruccion','parser.py',29),
  ('swhile -> WHILE PARIZQ expresion PARDER LLAIZQ instrucciones LLADER','swhile',7,'p_swhile','parser.py',35),
  ('asignacion -> ID IGUAL expresion PTC','asignacion',4,'p_asignacion','parser.py',40),
  ('declaracion -> INT ID IGUAL expresion PTC','declaracion',5,'p_declaracion','parser.py',45),
  ('evaluacion -> REVAL CORIZQ expresion CORDER PTC','evaluacion',5,'p_evaluacion','parser.py',50),
  ('expresion -> NUMERO','expresion',1,'p_expresion_unaria','parser.py',55),
  ('expresion -> ID','expresion',1,'p_expresion_unaria','parser.py',56),
  ('expresion -> bool','expresion',1,'p_expresion_unaria','parser.py',57),
  ('bool -> TRUE','bool',1,'p_bool','parser.py',68),
  ('bool -> FALSE','bool',1,'p_bool','parser.py',69),
  ('expresion -> expresion MAS expresion','expresion',3,'p_expresion_binaria','parser.py',74),
  ('expresion -> expresion MENOS expresion','expresion',3,'p_expresion_binaria','parser.py',75),
  ('expresion -> expresion MAYORQ expresion','expresion',3,'p_expresion_binaria','parser.py',76),
]
